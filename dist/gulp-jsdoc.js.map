{"version":3,"sources":["gulp-jsdoc.js"],"names":["jsdoc","os","require","type","debug","config","done","files","jsdocConfig","arguments","length","undefined","JSON","stringify","file","callback","push","path","on","resolve","reject","jsdocConfigClone","parse","source","include","concat","Object","assign","errMsg","error","Error","tmpobj","fileSync","join","writeFile","name","err","spawn","cmd","inkdocstrap","dirname","args","opts","template","templates","default","layoutFile","child","process","execPath","cwd","stdout","setEncoding","stderr","data","code","asCallback"],"mappings":"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","file":"gulp-jsdoc.js","sourcesContent":["import map from 'map-stream';\r\nimport tmp from 'tmp';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport fancyLog from 'fancy-log';\r\nimport beeper from 'beeper';\r\nimport Promise from 'bluebird';\r\nlet os = require('os').type();\r\n\r\nlet debug = require('debug')('gulp-jsdoc3');\r\n\r\n/**\r\n * @callback gulpDoneCallback\r\n */\r\n\r\n/**\r\n * A wrapper around jsdoc cli.\r\n *\r\n * This function collects all filenames. Then runs:\r\n * ```jsdoc -c config -t node_modules/ink-docstrap/template gulpFile1 gulpFile2```\r\n * @example\r\n * gulp.src(['README.md', 'src/*.js']), {read: false}).pipe(\r\n *     jsdoc(options, cb)\r\n * );\r\n *\r\n * @param {Object} [config=require('./jsdocConfig.json')]\r\n * @param {gulpDoneCallback} done\r\n * @returns {*|SignalBinding}\r\n */\r\nexport function jsdoc(config, done) {\r\n    let files = [];\r\n    let jsdocConfig;\r\n\r\n    // User just passed callback\r\n    if (arguments.length === 1 && typeof config === 'function') {\r\n        done = config;\r\n        config = undefined;\r\n    }\r\n\r\n    // Prevent some errors\r\n    if (typeof done !== 'function') {\r\n        done = function () {\r\n        };\r\n    }\r\n\r\n    jsdocConfig = config || require('./jsdocConfig.json');\r\n\r\n    debug('Config:\\n' + JSON.stringify(jsdocConfig, undefined, 2));\r\n\r\n    return map(function (file, callback) {\r\n        files.push(file.path);\r\n        callback(null, file);\r\n    }).on('end', function () {\r\n        // We use a promise to prevent multiple dones (normal cause error then close)\r\n        new Promise(function (resolve, reject) {\r\n            // We clone the config file so as to not affect the original\r\n            let jsdocConfigClone = JSON.parse(JSON.stringify(jsdocConfig));\r\n            // If the user has specified a source.include key, we append the\r\n            // gulp.src files to it.\r\n            if (jsdocConfigClone.source && jsdocConfigClone.source.include) {\r\n                jsdocConfigClone.source.include =\r\n                    jsdocConfigClone.source.include.concat(files);\r\n            } else {\r\n                jsdocConfigClone = Object.assign(jsdocConfigClone,\r\n                    { source: { include: files } });\r\n            }\r\n\r\n            if (jsdocConfigClone.source.include.length === 0) {\r\n                const errMsg = 'JSDoc Error: no files found to process';\r\n                fancyLog.error(errMsg);\r\n                beeper();\r\n                reject(new Error(errMsg));\r\n                return;\r\n            }\r\n\r\n            const tmpobj = tmp.fileSync();\r\n            debug('Documenting files: ' + jsdocConfigClone.source.include.join(' '));\r\n            fs.writeFile(tmpobj.name, JSON.stringify(jsdocConfigClone), 'utf8', function (err) {\r\n                // We couldn't write the temp file\r\n                /* istanbul ignore next */\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                const spawn = require('child_process').spawn,\r\n                    cmd = require.resolve('jsdoc/jsdoc.js'), // Needed to handle npm3 - find the binary anywhere\r\n                    inkdocstrap = path.dirname(require.resolve('ink-docstrap'));\r\n\r\n                let args = ['-c', tmpobj.name];\r\n\r\n                // Config + ink-docstrap if user did not specify their own layout or template\r\n                if (!(jsdocConfigClone.opts &&\r\n                    jsdocConfigClone.opts.template) && !(jsdocConfigClone.templates &&\r\n                    jsdocConfigClone.templates.default &&\r\n                    jsdocConfigClone.templates.default.layoutFile)) {\r\n                    args = args.concat(['-t', inkdocstrap]);\r\n                }\r\n\r\n                debug(cmd + ' ' + args.join(' '));\r\n\r\n                const child = os === 'Windows_NT'\r\n                    ? spawn(process.execPath, [cmd].concat(args), {cwd: process.cwd()})\r\n                    : spawn(cmd, args, {cwd: process.cwd()}); // unix\r\n                child.stdout.setEncoding('utf8');\r\n                child.stderr.setEncoding('utf8');\r\n                /* istanbul ignore next */\r\n                child.stdout.on('data', function (data) {\r\n                    fancyLog(data);\r\n                });\r\n                /* istanbul ignore next */\r\n                child.stderr.on('data', function (data) {\r\n                    fancyLog.error(data);\r\n                    beeper();\r\n                });\r\n                child.on('close', function (code) {\r\n                    if (code === 0) {\r\n                        fancyLog('Documented ' + jsdocConfigClone.source.include.length + ' files!');\r\n                        resolve();\r\n                    } else {\r\n                        fancyLog.error('JSDoc returned with error code: ' + code);\r\n                        beeper();\r\n                        reject(new Error('JSDoc closed with error code: ' + code));\r\n                    }\r\n                });\r\n                child.on('error', function (error) {\r\n                    fancyLog.error('JSDoc Error: ' + error);\r\n                    beeper();\r\n                    reject(new Error(error));\r\n                });\r\n            });\r\n        }).asCallback(done);\r\n    });\r\n}\r\n"]}